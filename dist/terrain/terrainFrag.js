export default "#define GLSLIFY 1\nuniform float time;\nuniform vec2 resolution;\nuniform float waterHeight;\nuniform vec3 landColor;\nuniform vec3 snowColor;\nuniform vec3 sandColor;\nuniform vec3 mountainColor;\n\nin vec3 outNormal;\nin vec3 localPos;\nin float radialOffset;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n  return mod289(((x * 34.0) + 10.0) * x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n  const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min(g.xyz, l.zxy);\n  vec3 i2 = max(g.xyz, l.zxy);\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3 ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_);    // mod(j,N)\n\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = y_ * ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4(x.xy, y.xy);\n  vec4 b1 = vec4(x.zw, y.zw);\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0) * 2.0 + 1.0;\n  vec4 s1 = floor(b1) * 2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n  vec3 p0 = vec3(a0.xy, h.x);\n  vec3 p1 = vec3(a0.zw, h.y);\n  vec3 p2 = vec3(a1.xy, h.z);\n  vec3 p3 = vec3(a1.zw, h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));\n}\n\nfloat ambientFactor = 0.0;\n\n#if NUM_DIR_LIGHTS > 0\nstruct DirectionalLight {\n  vec3 direction;\n  vec3 color;\n};\nuniform DirectionalLight directionalLights[NUM_DIR_LIGHTS];\n#endif\n\nvec3 ambient() {\n  vec3 lightColor = directionalLights[0].color;\n  return ambientFactor * lightColor;\n}\n\nvec3 diffuse(vec3 normal) {\n  vec3 lightDir = directionalLights[0].direction;\n  vec3 lightColor = directionalLights[0].color;\n  vec3 norm = normalize(normal);\n  float diff = max(dot(norm, lightDir), 0.0);\n  return diff * lightColor;\n}\n\n#define N_GRAD_STOPS 8\n\nvec3 multiStopGradient(float samplePos, float stopPos[N_GRAD_STOPS], vec3 stopColor[N_GRAD_STOPS]) {\n  // TODO Could this be unrolled by three.js to improve performance?\n  for(int i = 0; i < stopPos.length() - 1; ++i)\n    if(samplePos < stopPos[i + 1]) {\n      float t = (samplePos - stopPos[i]) / (stopPos[i + 1] - stopPos[i]);\n      return mix(stopColor[i], stopColor[i + 1], t);\n    }\n\n  // Don't want this\n  return vec3(1.0, 0.0, 1.0);\n}\n\nvec3 terrainTexture() {\n  float stopPos[N_GRAD_STOPS] = float[] (0.0, 0.035, 0.045, 0.055, 0.060, 0.07, 0.08, 1.0);\n  for(int i = 0; i < N_GRAD_STOPS; ++i) {\n    stopPos[i] += (waterHeight - 1.0) - 0.035;\n  }\n  vec3 stopColor[N_GRAD_STOPS] = vec3[] (sandColor, sandColor, landColor, landColor, mountainColor, mountainColor, snowColor, snowColor);\n\n  return multiStopGradient(radialOffset, stopPos, stopColor);\n\n  // float radialOffsetWithNoise = radialOffset + 0.005 * snoise(10.0 * localPos);\n  // return multiStopGradient(radialOffsetWithNoise, stopPos, stopColor);\n}\n\nvoid main() {\n  vec3 result = (ambient() + diffuse(outNormal)) * terrainTexture();\n  gl_FragColor = vec4(result, 1.0);\n  // gl_FragColor = vec4(terrainTexture(), 1.0);\n  // gl_FragColor = vec4(0.5 * outNormal + 0.5, 1.0);\n}"